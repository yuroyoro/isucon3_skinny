package model

import scalikejdbc._, SQLInterpolation._
import org.joda.time._
import skinny.orm.SkinnyCRUDMapper
import skinny.orm.feature.{ TimestampsFeature, SoftDeleteWithTimestampFeature }

case class Memos(
    id: Int,
    user: Int,
    content: Option[String] = None,
    username: Option[String] = None,
    contentHtml: Option[String] = None,
    isPrivate: Byte,
    createdAt: DateTime,
    updatedAt: DateTime) {
}

object Memos extends SkinnyCRUDMapper[Memos]
    with TimestampsFeature[Memos] {

  override lazy val tableName = "memos"

  override val columns = Seq("id", "user", "content", "is_private", "created_at", "updated_at")
  val m = Memos.syntax("m")

  override def extract(rs: WrappedResultSet, m: ResultName[Memos]): Memos = new Memos(
    id = rs.int(m.id),
    user = rs.int(m.user),
    content = rs.stringOpt(m.content),
    isPrivate = rs.byte(m.isPrivate),
    createdAt = rs.timestamp(m.createdAt).toDateTime,
    updatedAt = rs.timestamp(m.updatedAt).toDateTime
  )

  def parse(rs: WrappedResultSet): Memos = extract(rs, m.resultName)

  def total(implicit session: DBSession = autoSession): Long = {
    countBy(sqls"is_private=0")
  }

  def public(page: Int = 0)(implicit session: DBSession = autoSession): List[Memos] =
    withSQL {
      defaultSelectQuery.
        where.append(sqls"is_private=0").
        append(sqls"ORDER BY created_at DESC, id DESC LIMIT 100 OFFSET ${page * 100}")
    }.map(parse).list.apply()

  def findByUser(user_id: Int)(implicit session: DBSession = autoSession): List[Memos] =
    withSQL {
      defaultSelectQuery.
        where.eq(m.user, user_id).append(sqls"ORDER BY created_at DESC")
    }.map(parse).list.apply()

  def findPublicByUser(user_id: Int)(implicit session: DBSession = autoSession): List[Memos] =
    withSQL {
      defaultSelectQuery.
        where.eq(m.user, user_id).
        and.eq(m.isPrivate, 0).
        append(sqls"ORDER BY created_at DESC")
    }.map(parse).list.apply()
}
